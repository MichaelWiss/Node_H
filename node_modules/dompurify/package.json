{
  "_args": [
    [
      {
        "raw": "dompurify@^0.8.5",
        "scope": null,
        "escapedName": "dompurify",
        "name": "dompurify",
        "rawSpec": "^0.8.5",
        "spec": ">=0.8.5 <0.9.0",
        "type": "range"
      },
      "/Users/michaelwiss/Sites/Node_mike_A1/Node_H"
    ]
  ],
  "_from": "dompurify@>=0.8.5 <0.9.0",
  "_id": "dompurify@0.8.9",
  "_inCache": true,
  "_location": "/dompurify",
  "_nodeVersion": "4.2.6",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/dompurify-0.8.9.tgz_1493792517692_0.8136269999668002"
  },
  "_npmUser": {
    "name": "cure53",
    "email": "mario@cure53.de"
  },
  "_npmVersion": "3.5.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dompurify@^0.8.5",
    "scope": null,
    "escapedName": "dompurify",
    "name": "dompurify",
    "rawSpec": "^0.8.5",
    "spec": ">=0.8.5 <0.9.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/dompurify/-/dompurify-0.8.9.tgz",
  "_shasum": "fcec021f917b51f42a78af71d7875a7ba514fd64",
  "_shrinkwrap": null,
  "_spec": "dompurify@^0.8.5",
  "_where": "/Users/michaelwiss/Sites/Node_mike_A1/Node_H",
  "author": {
    "name": "Mario Heiderich",
    "email": "mario@cure53.de",
    "url": "https://cure53.de/"
  },
  "bugs": {
    "url": "https://github.com/cure53/DOMPurify/issues"
  },
  "dependencies": {},
  "description": "DOMPurify is a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG. It's written in JavaScript and works in all modern browsers (Safari, Opera (15+), Internet Explorer (10+), Firefox and Chrome - as well as almost anything else using Blink or WebKit). DOMPurify is written by security people who have vast background in web attacks and XSS. Fear not.",
  "devDependencies": {
    "jquery": "^2.2.3",
    "jsdom": "8.x.x",
    "jshint": "^2.9.2",
    "json-loader": "^0.5.4",
    "karma": "^0.13.22",
    "karma-browserstack-launcher": "1.0.0",
    "karma-chrome-launcher": "^1.0.1",
    "karma-firefox-launcher": "^1.0.0",
    "karma-fixture": "^0.2.6",
    "karma-html2js-preprocessor": "^1.0.0",
    "karma-json-fixtures-preprocessor": "0.0.6",
    "karma-qunit": "^1.0.0",
    "karma-webpack": "^1.7.0",
    "pre-commit": "^1.1.2",
    "qunit-parameterize": "^0.4.0",
    "qunit-tap": "^1.5.0",
    "qunitjs": "^1.23.1",
    "uglify-js": "^2.6.2",
    "webpack": "^1.13.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "fcec021f917b51f42a78af71d7875a7ba514fd64",
    "tarball": "https://registry.npmjs.org/dompurify/-/dompurify-0.8.9.tgz"
  },
  "files": [
    "src",
    "dist"
  ],
  "gitHead": "4465943c936b90fa966776d95dc360917801d80f",
  "homepage": "https://github.com/cure53/DOMPurify",
  "keywords": [
    "dom",
    "xss",
    "html",
    "svg",
    "mathml",
    "security",
    "secure",
    "sanitizer",
    "sanitize",
    "filter",
    "purify"
  ],
  "license": "MPL-2.0 OR Apache-2.0",
  "main": "src/purify.js",
  "maintainers": [
    {
      "name": "cure53",
      "email": "mario@cure53.de"
    },
    {
      "name": "fhemberger",
      "email": "mail@frederic-hemberger.de"
    }
  ],
  "name": "dompurify",
  "optionalDependencies": {},
  "pre-commit": [
    "lint",
    "minify",
    "amend-minified"
  ],
  "readme": "# DOMPurify [![Bower version](https://badge.fury.io/bo/dompurify.svg)](http://badge.fury.io/bo/dompurify) · [![npm version](https://badge.fury.io/js/dompurify.svg)](http://badge.fury.io/js/dompurify) · [![Build Status](https://travis-ci.org/cure53/DOMPurify.svg)](https://travis-ci.org/cure53/DOMPurify) · [![Downloads](https://img.shields.io/npm/dm/dompurify.svg)](https://www.npmjs.com/package/dompurify)\n\n[![NPM](https://nodei.co/npm/dompurify.png)](https://nodei.co/npm/dompurify/)\n\nDOMPurify is a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG. \n\nIt's also very simple to use and get started with.\n\nDOMPurify is written in JavaScript and works in all modern browsers (Safari, Opera (15+), Internet Explorer (10+), Edge, Firefox and Chrome - as well as almost anything else using Blink or WebKit). It doesn't break on IE6 or other legacy browsers. It either uses [a fall-back](#what-about-older-browsers-like-msie8) or simply does nothing. \n\nOur automated tests cover [16 different browsers](https://github.com/cure53/DOMPurify/blob/master/test/karma.conf.js#L185) right now. We also cover Node.js v4.0.0, v5.0.0 and v6.0.0, running DOMPurify on [jsdom](https://github.com/tmpvar/jsdom).\n\nDOMPurify is written by security people who have vast background in web attacks and XSS. Fear not. For more details please also read about our [Security Goals & Threat Model](https://github.com/cure53/DOMPurify/wiki/Security-Goals-&-Threat-Model)\n\n## What does it do?\n\nDOMPurify sanitizes HTML and prevents XSS attacks. You can feed DOMPurify with string full of dirty HTML and it will return a string with clean HTML. DOMPurify will strip out everything that contains dangerous HTML and thereby prevent XSS attacks and other nastiness. It's also damn bloody fast. We use the technologies the browser provides and turn them into an XSS filter. The faster your browser, the faster DOMPurify will be.\n\n## How do I use it?\n\nIt's easy. Just include DOMPurify on your website.\n\n### Using the unminified development version\n\n```html\n<script type=\"text/javascript\" src=\"src/purify.js\"></script>\n```\n\n### Using the minified and tested production version (source-map available)\n\n```html\n<script type=\"text/javascript\" src=\"dist/purify.min.js\"></script>\n```\n\nAfterwards you can sanitize strings by executing the following code:\n\n```javascript\nvar clean = DOMPurify.sanitize(dirty);\n```\n\nThe resulting HTML can be written into a DOM element using `innerHTML` or the DOM using `document.write()`. That is fully up to you. But keep in mind, if you use the sanitized HTML with jQuery's very insecure `elm.html()` method, then the `SAFE_FOR_JQUERY` flag has to be set to make sure it's safe! Other than that, all is fine.\n\nAfter sanitizing your markup, you can also have a look at the property `DOMPurify.removed` and find out, what elements and attributes were thrown out.\n\nIf you're using an [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) module loader like [Require.js](http://requirejs.org/), you can load this script asynchronously as well:\n\n```javascript\nrequire(['dompurify'], function(DOMPurify) {\n    var clean = DOMPurify.sanitize(dirty);\n});\n```\n\nDOMPurify also works server-side with node.js as well as client-side via [Browserify](http://browserify.org/) or similar translators.  Node.js 0.x is not supported; either [io.js](https://iojs.org) or Node.js 4.x or newer is required.\n\n```bash\nnpm install dompurify\n```\n\n```javascript\nconst createDOMPurify = require('dompurify');\nconst jsdom = require('jsdom');\nconst window = jsdom.jsdom('', {\n  features: {\n    FetchExternalResources: false, // disables resource loading over HTTP / filesystem\n    ProcessExternalResources: false // do not execute JS within script blocks\n  }\n}).defaultView;\nconst DOMPurify = createDOMPurify(window);\n\nconst clean = DOMPurify.sanitize(dirty);\n```\n\nStrictly speaking, DOMPurify creates a document without a browsing context and you can replace it with `const window = jsdom.jsdom().defaultView;`, however, the longer case protects against accidental bugs in jsdom or DOMPurify.\n\n## Is there a demo?\n\nOf course there is a demo! [Play with DOMPurify](https://cure53.de/purify)\n\n## What if I find a bypass?\n\nIf that happens, you probably qualify for a juicy bug bounty! The fine folks over at [FastMail](https://www.fastmail.com/) use DOMPurify for their services and added our library to their bug bounty scope. So, if you find a way to bypass or weaken DOMPurify, please have a look at their website and the [bug bounty info](https://www.fastmail.com/about/bugbounty.html).\n\n## Some purification samples please?\n\nHow does purified markup look like? Well, [the demo](https://cure53.de/purify) shows it for a big bunch of nasty elements. But let's also show some smaller examples!\n\n```javascript\nDOMPurify.sanitize('<img src=x onerror=alert(1)//>'); // becomes <img src=\"x\">\nDOMPurify.sanitize('<svg><g/onload=alert(2)//<p>'); // becomes <svg><g></g></svg>\nDOMPurify.sanitize('<p>abc<iframe/\\/src=jAva&Tab;script:alert(3)>def'); // becomes <p>abc</p>\nDOMPurify.sanitize('<math><mi//xlink:href=\"data:x,<script>alert(4)</script>\">'); // becomes <math></math>\nDOMPurify.sanitize('<TABLE><tr><td>HELLO</tr></TABL>'); // becomes <table><tbody><tr><td>HELLO</td></tr></tbody></table>\nDOMPurify.sanitize('<UL><li><A HREF=//google.com>click</UL>'); // becomes <ul><li><a href=\"//google.com\">click</a></li></ul>\n```\n\n## What is supported?\n\nDOMPurify currently supports HTML5, SVG and MathML. DOMPurify per default allows CSS, HTML custom data attributes. DOMPurify also supports the Shadow DOM - and sanitizes DOM templates recursively. DOMPurify also allows you to sanitize HTML for being used with the jQuery `$()` and `elm.html()` methods but requires the `SAFE_FOR_JQUERY` flag for that - see below.\n\n## What about older browsers like MSIE8?\n\nDOMPurify offers a fall-back behavior for older MSIE browsers. It uses the MSIE-only `toStaticHTML` feature to sanitize. Note however that in this fall-back mode, pretty much none of the configuration flags shown below have any effect. You need to handle that yourself.\n\nIf not even `toStaticHTML` is supported, DOMPurify does nothing at all. It simply returns exactly the string that you fed it.\n\n## Can I configure it?\n\nYes. The included default configuration values are pretty good already - but you can of course override them. Check out the [`/demos`](https://github.com/cure53/DOMPurify/tree/master/demos) folder to see a bunch of examples on how you can [customize DOMPurify](https://github.com/cure53/DOMPurify/tree/master/demos#what-is-this).\n\n```javascript\n// make output safe for usage in jQuery's $()/html() method (default is false)\nvar clean = DOMPurify.sanitize(dirty, {SAFE_FOR_JQUERY: true});\n\n// strip {{ ... }} and <% ... %> to make output safe for template systems\nvar clean = DOMPurify.sanitize(dirty, {SAFE_FOR_TEMPLATES: true});\n\n// allow only <b>\nvar clean = DOMPurify.sanitize(dirty, {ALLOWED_TAGS: ['b']});\n\n// allow only <b> and <q> with style attributes (for whatever reason)\nvar clean = DOMPurify.sanitize(dirty, {ALLOWED_TAGS: ['b', 'q'], ALLOWED_ATTR: ['style']});\n\n// leave all as it is but forbid <style>\nvar clean = DOMPurify.sanitize(dirty, {FORBID_TAGS: ['style']});\n\n// leave all as it is but forbid style attributes\nvar clean = DOMPurify.sanitize(dirty, {FORBID_ATTR: ['style']});\n\n// extend the existing array of allowed tags\nvar clean = DOMPurify.sanitize(dirty, {ADD_TAGS: ['my-tag']});\n\n// extend the existing array of attributes\nvar clean = DOMPurify.sanitize(dirty, {ADD_ATTR: ['my-attr']});\n\n// prohibit HTML5 data attributes (default is true)\nvar clean = DOMPurify.sanitize(dirty, {ALLOW_DATA_ATTR: false});\n\n// allow external protocol handlers in URL attributes (default is false)\n// by default only http, https, ftp, ftps, tel and mailto are allowed.\nvar clean = DOMPurify.sanitize(dirty, {ALLOW_UNKNOWN_PROTOCOLS: true});\n\n// return a DOM HTMLBodyElement instead of an HTML string (default is false)\nvar clean = DOMPurify.sanitize(dirty, {RETURN_DOM: true});\n\n// return a DOM DocumentFragment instead of an HTML string (default is false)\nvar clean = DOMPurify.sanitize(dirty, {RETURN_DOM_FRAGMENT: true});\n\n// return a DOM DocumentFragment instead of an HTML string (default is false)\n// also import it into the current document (default is false).\n// RETURN_DOM_IMPORT must be set if you would like to append\n// the returned node to the current document\nvar clean = DOMPurify.sanitize(dirty, {RETURN_DOM_FRAGMENT: true, RETURN_DOM_IMPORT: true});\ndocument.body.appendChild(clean);\n\n// return entire document including <html> tags (default is false)\nvar clean = DOMPurify.sanitize(dirty, {WHOLE_DOCUMENT: true});\n\n// disable DOM Clobbering protection on output (default is true, handle with care!)\nvar clean = DOMPurify.sanitize(dirty, {SANITIZE_DOM: false});\n\n// discard an element's content when the element is removed (default is true)\nvar clean = DOMPurify.sanitize(dirty, {KEEP_CONTENT: false});\n\n// glue elements like style, script or others to document.body and prevent unintuitive browser behavior in several edge-cases (default is false)\nvar clean = DOMPurify.sanitize(dirty, {FORCE_BODY: true});\n```\nThere is even [more examples here](https://github.com/cure53/DOMPurify/tree/master/demos#what-is-this), showing how you can run, customize and configure DOMPurify to fit your needs.\n\n## Hooks\n\nDOMPurify allows you to augment its functionality by attaching one or more functions with the `DOMPurify.addHook` method to one of the following hooks:\n\n- `beforeSanitizeElements`\n- `uponSanitizeElement`\n- `afterSanitizeElements`\n- `beforeSanitizeAttributes`\n- `uponSanitizeAttribute`\n- `afterSanitizeAttributes`\n- `beforeSanitizeShadowDOM`\n- `uponSanitizeShadowNode`\n- `afterSanitizeShadowDOM`\n\nIt passes the currently processed DOM node, when needed a literal with verified node and attribute data and the DOMPurify configuration to the callback. Check out the [MentalJS hook demo](https://github.com/cure53/DOMPurify/blob/master/demos/hooks-mentaljs-demo.html) to see how the API can be used nicely.\n\n_Example_:\n\n```javascript\nDOMPurify.addHook('beforeSanitizeElements', function(currentNode, data, config) {\n    // Do something with the current node and return it\n    return currentNode;\n});\n```\n\n## Continuous Integration\n\nWe are currently using Travis CI in combination with BrowserStack. This gives us the possibility to confirm for each and every commit that all is going according to plan in all supported browsers. Check out the build logs here: https://travis-ci.org/cure53/DOMPurify\n\nYou can further run local tests by executing `npm test`. The tests work fine with Node.js v0.6.2 and jsdom@8.5.0.\n\nAll relevant commits will be signed with the key `0x24BB6BF4` for additional security (since 8th of April 2016).\n\n## Security Mailing List\n\nWe maintain a mailing list that notifies whenever a security-critical release of DOMPurify was published. This means, if someone found a bypass and we fixed it with a release (which always happens when a bypass was found) a mail will go out to that list. This usually happens within minutes or few hours after learning about a bypass. The list can be subscribed to here:\n\n[https://lists.ruhr-uni-bochum.de/mailman/listinfo/dompurify-security](https://lists.ruhr-uni-bochum.de/mailman/listinfo/dompurify-security)\n\nFeature releases will not be announced to this list.\n\n## Who contributed?\n\nSeveral people need to be listed here! \n\n[@garethheyes](https://twitter.com/garethheyes) and [@filedescriptor](https://twitter.com/filedescriptor) for invaluable help, [@shafigullin](https://twitter.com/shafigullin) for breaking the library multiple times and thereby strengthening it, [@mmrupp](https://twitter.com/mmrupp) and [@irsdl](https://twitter.com/irsdl) for doing the same.\n\nBig thanks also go to [@asutherland](https://twitter.com/asutherland), [@mathias](https://twitter.com/mathias), [@cgvwzq](https://twitter.com/cgvwzq), [@robbertatwork](https://twitter.com/robbertatwork), [@giutro](https://twitter.com/giutro) and [@fhemberger](https://twitter.com/fhemberger)! \n\nFurther, thanks [@neilj](https://twitter.com/neilj) and [@0xsobky](https://twitter.com/0xsobky) for their code reviews and countless small optimizations, fixes and beautifications. \n\nBig thanks also go to [@tdeekens](https://twitter.com/tdeekens) for doing all the hard work and getting us on track with Travis CI and BrowserStack. And thanks to [@Joris-van-der-Wel](https://github.com/Joris-van-der-Wel) for setting up DOMPurify for jsdom and creating the additional test suite.\n\nAnd last but not least, thanks to [BrowserStack](https://browserstack.com) for supporting this project with their services for free and delivering excellent, dedicated and very professional support on top of that.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/cure53/DOMPurify.git"
  },
  "scripts": {
    "amend-minified": "scripts/amend-minified.sh",
    "build-demo": "node scripts/build-demo.js",
    "lint": "jshint src/purify.js",
    "minify": "scripts/minify.sh",
    "test": "npm run lint && npm run test:jsdom && npm run test:karma -- --browsers Firefox,Chrome",
    "test:ci": "npm run lint && npm run test:jsdom && (([ \"${TRAVIS_PULL_REQUEST}\" != \"false\" ] || [ \"${TEST_BROWSERSTACK}\" != \"true\" ]) || karma start test/karma.conf.js --log-level error --reporters dots --single-run)",
    "test:jsdom": "node test/jsdom-node-runner --dot",
    "test:karma": "karma start test/karma.conf.js --log-level warn --single-run"
  },
  "version": "0.8.9"
}
